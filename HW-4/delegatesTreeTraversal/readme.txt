Часто делегаты можно использовать для тонкой настройки алгоритмов, что позволит использовать один и тот же код для решения несколько разных задач.

Скачайте проект Delegates.TreeTraversal

Перед вами три задачи:

    Дано дерево категорий продуктов, в каждой категории могут быть другие категории и собственно продукты. Вам нужно вывести список продуктов.
    Дано дерево задач, каждая задача может содержать подзадачи. Вам нужно вывести список таких задач, у которых нет подзадач.
    Дано бинарное дерево, у которого каждый узел содержит значение. Вам нужно вывести все значения в листьях этого дерева.

Вам нужно написать один алгоритм обхода дерева, который бы принимал в качестве аргументов делегаты, объясняющие алгоритму, как обходить дерево и какие величины выводить.
Понятность кода

Имейте в виду, что слишком сложные делегаты в сигнатуре метода могут затруднять чтение кода. Постарайтесь решить задачу так, чтобы читатель не запутался в делегатах. В идеале вызов вашего метода обхода дерева должен быть понятен без чтения его кода, только по имени метода и именам и типам его аргументов.

После этого вам нужно написать реализации трех публичных методов в классе Traversal так, чтобы все тесты заработали. Если вы все сделали правильно, то эти методы должны оказаться простыми и короткими.
https://ulearn.me/course/cs2/Praktika_Obkhody_derev_ev__181cb139-453e-4025-993c-e307a7f76dda
